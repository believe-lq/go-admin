name: Build and Push to Aliyun Registry

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  NAMESPACE: luoqiangtest
  IMAGE_NAME: go-admin
  LARK_WEBHOOK: https://open.larksuite.com/open-apis/bot/v2/hook/e7430eb4-9345-4976-b717-f0e7984b22fd

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      id: checkout
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      id: setup-docker
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Aliyun Container Registry
      id: login
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
        
    - name: Generate tag
      id: tag
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        fi
        echo "Generated tag: ${{ steps.tag.outputs.tag }}"
        
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image info
      id: output
      run: |
        echo "🎉 Build completed successfully!"
        echo "📦 Image details:"
        echo "   Registry: ${{ env.REGISTRY }}"
        echo "   Namespace: ${{ env.NAMESPACE }}"
        echo "   Image name: ${{ env.IMAGE_NAME }}"
        echo "   Tag: ${{ steps.tag.outputs.tag }}"
        echo "   Full image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}"
        echo ""
        echo "🚀 You can now pull and run the image:"
        echo "   docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}"
        echo "   docker run -d -p 8000:8000 ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}"
        
    - name: Send success notification to Lark
      if: success()
      run: |
        echo "发送成功通知到飞书..."
        
        # 构建消息内容
        MESSAGE="Docker镜像构建成功\n\n构建状态：成功\n镜像地址：${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}\n构建链接：${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n构建时间：$(date '+%Y-%m-%d %H:%M:%S')"
        
        # 发送文本消息
        curl -X POST ${{ env.LARK_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d "{\"msg_type\": \"text\", \"content\": {\"text\": \"$MESSAGE\"}}" \
          --silent --show-error --fail
        
        if [ $? -eq 0 ]; then
          echo "成功通知发送完成"
        else
          echo "通知发送失败，但不影响构建"
        fi
        
    - name: Send failure notification to Lark
      if: failure()
      run: |
        echo "发送失败通知到飞书..."
        
        # 获取失败步骤信息
        FAILED_STEP="未知步骤"
        
        # 检查各个步骤状态
        if [[ "${{ steps.checkout.conclusion }}" == "failure" ]]; then
          FAILED_STEP="Checkout code"
        elif [[ "${{ steps.setup-docker.conclusion }}" == "failure" ]]; then
          FAILED_STEP="Set up Docker Buildx"
        elif [[ "${{ steps.login.conclusion }}" == "failure" ]]; then
          FAILED_STEP="Login to Aliyun Container Registry"
        elif [[ "${{ steps.tag.conclusion }}" == "failure" ]]; then
          FAILED_STEP="Generate tag"
        elif [[ "${{ steps.build.conclusion }}" == "failure" ]]; then
          FAILED_STEP="Build and push Docker image"
        elif [[ "${{ steps.output.conclusion }}" == "failure" ]]; then
          FAILED_STEP="Output image info"
        else
          FAILED_STEP="Build and push Docker image"
        fi
        
        # 构建失败消息
        MESSAGE="Docker镜像构建失败\n\n失败步骤：$FAILED_STEP\n失败时间：$(date '+%Y-%m-%d %H:%M:%S')\n详细日志：${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # 发送失败通知
        curl -X POST ${{ env.LARK_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d "{\"msg_type\": \"text\", \"content\": {\"text\": \"$MESSAGE\"}}" \
          --silent --show-error --fail
        
        if [ $? -eq 0 ]; then
          echo "失败通知发送完成"
        else
          echo "通知发送失败，但不影响构建状态"
        fi 